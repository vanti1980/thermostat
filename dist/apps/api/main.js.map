{"version":3,"file":"main.js","mappings":"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","sources":["webpack://thermostat/./apps/api/src/app/app.module.ts","webpack://thermostat/./apps/api/src/app/id/id.controller.ts","webpack://thermostat/./apps/api/src/app/id/id.module.ts","webpack://thermostat/./apps/api/src/app/id/id.service.ts","webpack://thermostat/./apps/api/src/app/schedule/schedule.controller.ts","webpack://thermostat/./apps/api/src/app/schedule/schedule.module.ts","webpack://thermostat/./apps/api/src/app/schedule/schedule.service.ts","webpack://thermostat/./apps/api/src/app/status/status.controller.ts","webpack://thermostat/./apps/api/src/app/status/status.module.ts","webpack://thermostat/./apps/api/src/app/status/status.service.ts","webpack://thermostat/./libs/models/src/index.ts","webpack://thermostat/external commonjs \"@nestjs/common\"","webpack://thermostat/external commonjs \"@nestjs/config\"","webpack://thermostat/external commonjs \"@nestjs/core\"","webpack://thermostat/external commonjs \"@nestjs/serve-static\"","webpack://thermostat/external commonjs \"body-parser\"","webpack://thermostat/external commonjs \"cyclic-dynamodb\"","webpack://thermostat/external commonjs \"date-fns\"","webpack://thermostat/external commonjs \"express-rate-limit\"","webpack://thermostat/external commonjs \"helmet\"","webpack://thermostat/external commonjs \"tslib\"","webpack://thermostat/external commonjs \"uuid\"","webpack://thermostat/external node-commonjs \"path\"","webpack://thermostat/webpack/bootstrap","webpack://thermostat/./apps/api/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { ServeStaticModule } from '@nestjs/serve-static';\r\n\r\nimport * as path from 'path';\r\n\r\nimport { IdModule } from './id/id.module';\r\nimport { ScheduleModule } from './schedule/schedule.module';\r\nimport { StatusModule } from './status/status.module';\r\n\r\n@Module({\r\n  imports: [\r\n    ServeStaticModule.forRoot({\r\n      rootPath: path.join(__dirname, '..', 'web'),\r\n      exclude: ['/api*'],\r\n      serveStaticOptions: {\r\n        dotfiles: 'ignore',\r\n        etag: false,\r\n        extensions: [\r\n          'htm',\r\n          'html',\r\n          'css',\r\n          'js',\r\n          'ico',\r\n          'jpg',\r\n          'jpeg',\r\n          'png',\r\n          'svg',\r\n        ],\r\n        index: ['index.html'],\r\n        maxAge: '1m',\r\n        redirect: false,\r\n      },\r\n    }),\r\n    ConfigModule.forRoot(),\r\n    // AuthModule,\r\n    // LogsModule,\r\n    IdModule,\r\n    ScheduleModule,\r\n    StatusModule,\r\n  ],\r\n})\r\nexport class AppModule {}\r\n","import {\r\n  Body,\r\n  Controller,\r\n  Get,\r\n  HttpException,\r\n  HttpStatus,\r\n  Logger,\r\n  Post,\r\n} from '@nestjs/common';\r\nimport { IdService } from './id.service';\r\n\r\n@Controller('id')\r\nexport class IdController {\r\n  private readonly logger = new Logger(IdController.name);\r\n\r\n  constructor(private idService: IdService) {}\r\n\r\n  @Get('')\r\n  async getIds(): Promise<string[]> {\r\n    return this.idService.getIds().catch((err) => {\r\n      this.logger.error(`Could not query IDs`, err);\r\n      throw new HttpException(\r\n        `Could not query IDs`,\r\n        HttpStatus.BAD_REQUEST\r\n      );\r\n    });\r\n  }\r\n\r\n  @Post('')\r\n  async createId(@Body() id: string): Promise<string> {\r\n    return this.idService.createId(id).catch((err) => {\r\n      this.logger.error(`Could not create ID ${id}`, err);\r\n      throw new HttpException(\r\n        `Could not create ID ${id}`,\r\n        HttpStatus.BAD_REQUEST\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { IdController } from './id.controller';\r\nimport { IdService } from './id.service';\r\n\r\n@Module({\r\n  controllers: [IdController],\r\n  providers: [IdService],\r\n  exports: [IdService],\r\n})\r\nexport class IdModule {}\r\n","import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\r\nimport * as db from 'cyclic-dynamodb';\r\n\r\nconst COLL_ID = 'id';\r\n\r\n@Injectable()\r\nexport class IdService {\r\n\r\n  async getIds(): Promise<string[]> {\r\n    const list = (await db.collection(COLL_ID).list());\r\n    return list.results.map(item => item.key);\r\n  }\r\n\r\n  async createId(id: string): Promise<string> {\r\n    return await db.collection(COLL_ID).set(id, {});\r\n  }\r\n\r\n/**\r\n * Calls callback if ID is valid\r\n * @param id\r\n */\r\n async checkValidId(id: string): Promise<void> {\r\n  const entry = await db.collection(COLL_ID).get(id);\r\n  if (!entry) {\r\n    throw new HttpException('Invalid Id', HttpStatus.BAD_REQUEST);\r\n  }\r\n};\r\n\r\n}\r\n","import { Schedule, ScheduleRequest } from '@models';\r\nimport { Body, Controller, Delete, Get, Headers, Param, Post, Put } from '@nestjs/common';\r\nimport { IdService } from '../id/id.service';\r\nimport { ScheduleService } from './schedule.service';\r\n\r\n@Controller('schedules')\r\nexport class ScheduleController {\r\n  constructor(private idSvc: IdService, private scheduleSvc: ScheduleService) {}\r\n\r\n  @Get('') async getSchedules(@Headers('id') id: string): Promise<Schedule[]> {\r\n    return this.idSvc\r\n      .checkValidId(id)\r\n      .then(() => this.scheduleSvc.getSchedules(id));\r\n  }\r\n\r\n  @Post('') async createSchedule(\r\n    @Headers('id') id: string,\r\n    @Body() scheduleRequest: ScheduleRequest\r\n  ): Promise<Schedule> {\r\n    return this.idSvc\r\n      .checkValidId(id)\r\n      .then(() => this.scheduleSvc.createSchedule(id, scheduleRequest));\r\n  }\r\n\r\n  @Delete(':scheduleId') async deleteSchedule(\r\n    @Headers('id') id: string,\r\n    @Param('scheduleId') scheduleId: string,\r\n  ): Promise<void> {\r\n    return this.idSvc\r\n      .checkValidId(id)\r\n      .then(() => this.scheduleSvc.deleteSchedule(scheduleId));\r\n  }\r\n\r\n  @Put(':scheduleId') async updateSchedule(\r\n    @Headers('id') id: string,\r\n    @Param('scheduleId') scheduleId: string,\r\n    @Body() schedule: Schedule\r\n  ): Promise<Schedule> {\r\n    return this.idSvc\r\n      .checkValidId(id)\r\n      .then(() => this.scheduleSvc.updateSchedule(scheduleId, schedule));\r\n  }\r\n\r\n}\r\n","import { Module } from '@nestjs/common';\r\n\r\nimport { IdModule } from '../id/id.module';\r\nimport { ScheduleController } from './schedule.controller';\r\nimport { ScheduleService } from './schedule.service';\r\n\r\n@Module({\r\n  imports: [IdModule],\r\n  controllers: [ScheduleController],\r\n  providers: [ScheduleService],\r\n  exports: [ScheduleService],\r\n})\r\nexport class ScheduleModule {}\r\n","import { Schedule, ScheduleRequest } from '@models';\r\nimport { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\r\nimport * as db from 'cyclic-dynamodb';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nimport {\r\n  differenceInCalendarDays,\r\n  differenceInCalendarMonths,\r\n  differenceInCalendarWeeks,\r\n  getDate,\r\n  getDay,\r\n  isAfter,\r\n  isBefore,\r\n  parseISO,\r\n  set,\r\n} from 'date-fns';\r\n\r\ntype Unit = 'd' | 'w' | 'm';\r\n\r\n// in order to be able to query exactly the days which are present (to not get keys which are not available)\r\n// key: <ID>_YYYY, value: [\"20221001\",\"20221002\"]\r\n// collection would contain (per ID) 1 entry per year = 365 * 11 + 2 = 4017 bytes\r\n// const COLL_STATUS_DAYS = 'statusDays';\r\n\r\n// key: <ID>_<UUID>, value: {\"from\":\"2022-10-03T10:00:00Z\",\"priority\":1,\"set\":19,\"rUnit\":\"w\",\"rDays\":[0,1,2,3,4],\"rFrom\":\"0700\",\"rTo\":\"1700\"} -> for recurring setting\r\n// key: <ID>_<UUID>, value: {\"from\":\"2022-10-03T10:00:00Z\",\"to\":\"2022-10-03T16:00:00Z\",\"priority\":10,\"set\":21} -> for one-time setting\r\nconst COLL_SCHEDULE = 'schedule';\r\n\r\n@Injectable()\r\nexport class ScheduleService {\r\n  private readonly logger = new Logger(ScheduleService.name);\r\n\r\n  constructor() {}\r\n\r\n  /**\r\n   * Handles when thermostat send a status.\r\n   *\r\n   * @param {Request} req\r\n   * @param {Response} res\r\n   */\r\n  async getSchedules(id: string): Promise<Schedule[]> {\r\n    return await this.getActiveSchedules(id);\r\n  }\r\n\r\n  async createSchedule(\r\n    id: string,\r\n    request: ScheduleRequest\r\n  ): Promise<Schedule> {\r\n    // key: <ID>_<UUID>, value: {\"from\":\"2022-10-03T10:00:00Z\",\"priority\":1,\"set\":19,\"rUnit\":\"w\",\"rDays\":[0,1,2,3,4],\"rFrom\":\"0700\",\"rTo\":\"1700\"} -> for recurring setting\r\n    const key = `${id}_${uuid()}`;\r\n    const priority =\r\n      (await db.collection(COLL_SCHEDULE).list()).results.length + 1;\r\n    await db.collection(COLL_SCHEDULE).set(key, {\r\n      from: request.from,\r\n      to: request.to,\r\n      priority,\r\n      set: request.set,\r\n      rUnit: request.recurring?.unit,\r\n      rCount: request.recurring?.count,\r\n      rDays: request.recurring?.days,\r\n      rFrom: request.recurring?.from,\r\n      rTo: request.recurring?.to,\r\n    });\r\n    return {\r\n      ...request,\r\n      id: key,\r\n      priority,\r\n    };\r\n  }\r\n\r\n  async deleteSchedule(scheduleId: string): Promise<void> {\r\n    const schedule = await db.collection(COLL_SCHEDULE).delete(scheduleId);\r\n    if (!schedule) {\r\n      throw new HttpException(\r\n        `Could not delete schedule with ID ${scheduleId}`,\r\n        HttpStatus.NOT_FOUND\r\n      );\r\n    }\r\n  }\r\n\r\n  async updateSchedule(\r\n    scheduleId: string,\r\n    request: Schedule\r\n  ): Promise<Schedule> {\r\n    // key: <ID>_<UUID>, value: {\"from\":\"2022-10-03T10:00:00Z\",\"priority\":1,\"set\":19,\"rUnit\":\"w\",\"rDays\":[0,1,2,3,4],\"rFrom\":\"0700\",\"rTo\":\"1700\"} -> for recurring setting\r\n    const schedule = await db.collection(COLL_SCHEDULE).get(scheduleId);\r\n    if (!schedule) {\r\n      throw new HttpException(\r\n        `Could not find schedule with ID ${scheduleId}`,\r\n        HttpStatus.NOT_FOUND\r\n      );\r\n    }\r\n    const updatedSchedule = {\r\n      ...schedule,\r\n      from: request.from,\r\n      to: request.to,\r\n      set: request.set,\r\n      rUnit: request.recurring?.unit,\r\n      rCount: request.recurring?.count,\r\n      rDays: request.recurring?.days,\r\n      rFrom: request.recurring?.from,\r\n      rTo: request.recurring?.to,\r\n    };\r\n    await db.collection(COLL_SCHEDULE).set(scheduleId, updatedSchedule);\r\n    return updatedSchedule;\r\n  }\r\n\r\n  /**\r\n   * Returns schedules in effect.\r\n   *\r\n   * @param {string} id Thermostat ID\r\n   * @returns {Promise<Schedule[]>}\r\n   */\r\n  private async getActiveSchedules(id: string): Promise<Schedule[]> {\r\n    // TODO solve with filter\r\n    const briefScheduleItems = await db.collection(COLL_SCHEDULE).list();\r\n    const briefSchedules = briefScheduleItems.results.filter((item) =>\r\n      item.key.startsWith(`${id}_`)\r\n    );\r\n    const schedules = await Promise.all(\r\n      briefSchedules.map((sch) => db.collection(COLL_SCHEDULE).get(sch.key))\r\n    );\r\n    schedules.sort((a, b) => a.props.priority - b.props.priority);\r\n    const now = new Date();\r\n    return (schedules || [])\r\n      .map((schedule) => ({ id: schedule.key, ...schedule.props }))\r\n      .filter(\r\n        (props) =>\r\n          (!props.from || !isAfter(parseISO(props.from), now)) &&\r\n          (!props.to || !isBefore(parseISO(props.to), now))\r\n      )\r\n      .filter(\r\n        (props) =>\r\n          !props.rUnit ||\r\n          this.recurringToday(\r\n            now,\r\n            parseISO(props.from),\r\n            props.rUnit,\r\n            props.rCount,\r\n            props.rFrom,\r\n            props.rTo\r\n          ) ||\r\n          this.recurringThisWeek(\r\n            now,\r\n            parseISO(props.from),\r\n            props.rUnit,\r\n            props.rCount,\r\n            props.rDays,\r\n            props.rFrom,\r\n            props.rTo\r\n          ) ||\r\n          this.recurringThisMonth(\r\n            now,\r\n            parseISO(props.from),\r\n            props.rUnit,\r\n            props.rCount,\r\n            props.rDays,\r\n            props.rFrom,\r\n            props.rTo\r\n          )\r\n      );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} id\r\n   * @returns {Promise<Schedule | undefined>}\r\n   */\r\n  async getEffectiveSchedule(id: string): Promise<Schedule> {\r\n    const schedules = await this.getActiveSchedules(id);\r\n    return schedules.pop();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Date} now\r\n   * @param {string} rFrom\r\n   * @param {string} rTo\r\n   * @returns {boolean}\r\n   */\r\n  private inHourMinInterval(now: Date, rFrom?: string, rTo?: string): boolean {\r\n    return (\r\n      isBefore(this.todayHoursMins(rFrom), now) &&\r\n      isAfter(this.todayHoursMins(rTo), now)\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Date} now\r\n   * @param {Date} from\r\n   * @param {'d'|'w'|'m'} rUnit Unit\r\n   * @param {number} rCount\r\n   * @param {string} rFrom\r\n   * @param {string} rTo\r\n   * @returns {boolean}\r\n   */\r\n  private recurringToday(\r\n    now: Date,\r\n    from: Date,\r\n    rUnit: Unit,\r\n    rCount?: number,\r\n    rFrom?: string,\r\n    rTo?: string\r\n  ): boolean {\r\n    return (\r\n      rUnit === 'd' &&\r\n      differenceInCalendarDays(now, from) % (rCount || 1) === 0 &&\r\n      this.inHourMinInterval(now, rFrom, rTo)\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Date} now\r\n   * @param {Date} from\r\n   * @param {'d'|'w'|'m'} rUnit Unit\r\n   * @param {number} rCount\r\n   * @param {Array<number>} rDays\r\n   * @param {string} rFrom\r\n   * @param {string} rTo\r\n   * @returns {boolean}\r\n   */\r\n  private recurringThisWeek(\r\n    now: Date,\r\n    from: Date,\r\n    rUnit: Unit,\r\n    rCount: number | undefined,\r\n    rDays: number[],\r\n    rFrom?: string,\r\n    rTo?: string\r\n  ) {\r\n    return (\r\n      rUnit === 'w' &&\r\n      differenceInCalendarWeeks(now, from) % (rCount || 1) === 0 &&\r\n      (rDays || []).includes(getDay(now)) &&\r\n      this.inHourMinInterval(now, rFrom, rTo)\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Date} now\r\n   * @param {Date} from\r\n   * @param {'d'|'w'|'m'} rUnit Unit\r\n   * @param {number} rCount\r\n   * @param {Array<number>} rDays\r\n   * @param {string} rFrom\r\n   * @param {string} rTo\r\n   * @returns {boolean}\r\n   */\r\n  private recurringThisMonth(\r\n    now: Date,\r\n    from: Date,\r\n    rUnit: Unit,\r\n    rCount: number | undefined,\r\n    rDays: number[],\r\n    rFrom?: string,\r\n    rTo?: string\r\n  ): boolean {\r\n    return (\r\n      rUnit === 'm' &&\r\n      differenceInCalendarMonths(now, from) % (rCount || 1) === 0 &&\r\n      (rDays || []).includes(getDate(now)) &&\r\n      this.inHourMinInterval(now, rFrom, rTo)\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string} hourMin\r\n   * @returns {Date}\r\n   */\r\n  private todayHoursMins(hourMin: string): Date {\r\n    return set(new Date(), {\r\n      hours: +hourMin.substring(0, 2),\r\n      minutes: +hourMin.substring(2, 4),\r\n    });\r\n  }\r\n}\r\n","import { Status, StatusRequest } from '@models';\r\nimport { Body, Controller, Get, Headers, Post, Query } from '@nestjs/common';\r\nimport { IdService } from '../id/id.service';\r\nimport { StatusService } from './status.service';\r\n\r\n@Controller('')\r\nexport class StatusController {\r\n  constructor(private idSvc: IdService, private statusSvc: StatusService) {}\r\n\r\n  @Get('status') async getStatus(@Headers('id') id: string): Promise<Status> {\r\n    return this.idSvc.checkValidId(id).then(() => this.statusSvc.getStatus(id));\r\n  }\r\n\r\n  @Post('status') async postStatus(\r\n    @Headers('id') id: string,\r\n    @Body() statusRequest: StatusRequest\r\n  ): Promise<Status> {\r\n    return this.idSvc\r\n      .checkValidId(id)\r\n      .then(() => this.statusSvc.postStatus(id, statusRequest));\r\n  }\r\n\r\n  @Get('statuses') async getStatuses(\r\n    @Headers('id') id: string,\r\n    @Query('from') from?: string,\r\n    @Query('to') to?: string\r\n  ): Promise<Status[]> {\r\n    return this.idSvc\r\n      .checkValidId(id)\r\n      .then(() => this.statusSvc.getStatuses(id, from, to));\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\n\r\nimport { IdModule } from '../id/id.module';\r\nimport { ScheduleModule } from '../schedule/schedule.module';\r\nimport { StatusController } from './status.controller';\r\nimport { StatusService } from './status.service';\r\n\r\n@Module({\r\n  imports: [IdModule, ScheduleModule],\r\n  controllers: [StatusController],\r\n  providers: [StatusService],\r\n  exports: [StatusService],\r\n})\r\nexport class StatusModule {}\r\n","import { HttpException, HttpStatus, Injectable, Logger } from '@nestjs/common';\r\nimport { Status, StatusRequest } from '@models';\r\nimport * as db from 'cyclic-dynamodb';\r\nimport { format, formatISO, set, sub } from 'date-fns';\r\nimport { ScheduleService } from '../schedule/schedule.service';\r\n\r\ntype Unit = 'd' | 'w' | 'm';\r\n\r\n// in order to be able to query exactly the days which are present (to not get keys which are not available)\r\n// key: <ID>_YYYY, value: [\"20221001\",\"20221002\"]\r\n// collection would contain (per ID) 1 entry per year = 365 * 11 + 2 = 4017 bytes\r\n// const COLL_STATUS_DAYS = 'statusDays';\r\n\r\n// key: <ID>_<UUID>, value: {\"from\":\"2022-10-03T10:00:00Z\",\"priority\":1,\"set\":19,\"rUnit\":\"w\",\"rDays\":[0,1,2,3,4],\"rFrom\":\"0700\",\"rTo\":\"1700\"} -> for recurring setting\r\n// key: <ID>_<UUID>, value: {\"from\":\"2022-10-03T10:00:00Z\",\"to\":\"2022-10-03T16:00:00Z\",\"priority\":10,\"set\":21} -> for one-time setting\r\nconst COLL_SCHEDULE = 'schedule';\r\n\r\n// key: <ID>_YYYYMMDD, value: [{\"1005\":21.5,\"1010\":21.75}]\r\n// each day a JSON string of 24*12=288 entries (with 5 min refresh), ca. 12*288=3500 bytes\r\n// collection would yearly contain (per ID) 365 entries = 365 * (50 + 3500) = ca. 1.3 MB\r\nconst COLL_STATUS = 'status';\r\n\r\nconst MAX_LOOK_BEHIND = 30;\r\n\r\n@Injectable()\r\nexport class StatusService {\r\n  private readonly logger = new Logger(StatusService.name);\r\n\r\n  constructor(private scheduleSvc: ScheduleService) {}\r\n\r\n  async getStatus(id: string): Promise<Status> {\r\n    this.logger.debug(`getStatus id=${id}`);\r\n    const statusColl = db.collection(COLL_STATUS);\r\n    let statusItem: Status | undefined = undefined;\r\n    let iterations = 0;\r\n    let latestDate = new Date();\r\n    do {\r\n      const key = `${id}_${format(latestDate, 'yyyyMMdd')}`;\r\n      statusItem = await statusColl.get(key);\r\n      latestDate = sub(latestDate, {days: 1});\r\n    } while (!statusItem && iterations++ < MAX_LOOK_BEHIND);\r\n\r\n    if (statusItem) {\r\n      const latestStatus = this.getStatusesFromItem(statusItem).pop();\r\n      if (latestStatus) {\r\n        return latestStatus;\r\n      } else {\r\n        throw new HttpException(\r\n          'Could not retrieve status because no status found',\r\n          HttpStatus.NOT_FOUND\r\n        );\r\n      }\r\n    } else {\r\n      throw new HttpException(\r\n        'Could not retrieve status because no status found',\r\n        HttpStatus.NOT_FOUND\r\n      );\r\n    }\r\n  }\r\n\r\n  async getStatuses(id: string, from?: string, to?: string): Promise<Status[]> {\r\n    this.logger.debug(`getStatuses id=${id}, from=${from}, to=${to}`);\r\n    const briefStatusItems = await db.collection(COLL_STATUS).list();\r\n    const statusItems = await Promise.all(\r\n      briefStatusItems.results\r\n        .filter((item) => item.key.startsWith(`${id}_`))\r\n        .map((item) => db.collection(COLL_STATUS).get(item.key))\r\n    );\r\n    return statusItems.map((item) => this.getStatusesFromItem(item)).flat();\r\n  }\r\n\r\n  async postStatus(id: string, statusRequest: StatusRequest): Promise<Status> {\r\n    this.logger.debug(`postStatus id=${id}, statusRequest=${JSON.stringify(statusRequest)}`);\r\n    const now = new Date();\r\n    const key = `${id}_${format(now, 'yyyyMMdd')}`;\r\n    const statusColl = db.collection(COLL_STATUS);\r\n    const props = {};\r\n    props[format(now, 'HHmm')] = statusRequest.temp;\r\n    await statusColl.set(key, props);\r\n    const schedule = await this.scheduleSvc.getEffectiveSchedule(id);\r\n    return {\r\n      temp: statusRequest.temp,\r\n      ts: formatISO(now),\r\n      schedule,\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {CyclicItem} item\r\n   * @returns {Status[]}\r\n   */\r\n  private getStatusesFromItem(item: any): Status[] {\r\n    return Object.entries(item.props)\r\n      .filter(([key]) => /\\d{4}/.test(key))\r\n      .map(([key, value]) => ({\r\n        temp: value as number,\r\n        ts: formatISO(\r\n          set(new Date(), {\r\n            ...this.getStatusKeyDateSetProps(item.key),\r\n            ...this.getStatusValueKeyTimeSetProps(key),\r\n          })\r\n        ),\r\n      }));\r\n  }\r\n\r\n  /**\r\n   * Returns status key latter part as properties settable with date-fns.\r\n   * @param {string} key <ID>_yyyyMMdd\r\n   * @returns {object}\r\n   */\r\n  private getStatusKeyDateSetProps(\r\n    key: string\r\n  ): Partial<Parameters<typeof set>[1]> {\r\n    const parts = key.split('_');\r\n    if (parts.length < 2) {\r\n      console.warn(`Invalid status key ${key}!`);\r\n      return {};\r\n    }\r\n    return {\r\n      year: +parts[parts.length - 1].substring(0, 4),\r\n      month: (+parts[parts.length - 1].substring(4, 6)) - 1,\r\n      date: +parts[parts.length - 1].substring(6, 8),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns status value key as properties settable with date-fns.\r\n   * @param {string} key HHmm\r\n   * @returns {object}\r\n   */\r\n  private getStatusValueKeyTimeSetProps(\r\n    key: string\r\n  ): Partial<Parameters<typeof set>[1]> {\r\n    return {\r\n      hours: +key.substring(0, 2),\r\n      minutes: +key.substring(2, 4),\r\n      seconds: 0,\r\n      milliseconds: 0,\r\n    };\r\n  }\r\n}\r\n","export * from './lib/recurring';\r\nexport * from './lib/schedule';\r\nexport * from './lib/schedule-request';\r\nexport * from './lib/status';\r\nexport * from './lib/status-request';\r\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/config\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/serve-static\");","module.exports = require(\"body-parser\");","module.exports = require(\"cyclic-dynamodb\");","module.exports = require(\"date-fns\");","module.exports = require(\"express-rate-limit\");","module.exports = require(\"helmet\");","module.exports = require(\"tslib\");","module.exports = require(\"uuid\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * This is not a production server yet!\r\n * This is only a minimal backend to get started.\r\n */\r\n\r\nimport { Logger } from '@nestjs/common';\r\nimport { NestFactory } from '@nestjs/core';\r\n\r\nimport { AppModule } from './app/app.module';\r\n\r\nimport * as bodyParser from 'body-parser';\r\nimport helmet from 'helmet';\r\nimport rateLimit from 'express-rate-limit';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule, {\r\n    logger: ['error', 'warn'],\r\n  });\r\n  const globalPrefix = 'api';\r\n  app.setGlobalPrefix(globalPrefix);\r\n  app.enableCors();\r\n  app.use(bodyParser.json({ limit: \"50mb\" }));\r\n  app.use(helmet({\r\n    contentSecurityPolicy: {\r\n      directives: {\r\n        ...helmet.contentSecurityPolicy.getDefaultDirectives(),\r\n        'script-src': [\"'self'\", \"'unsafe-inline'\", \"'unsafe-eval'\"]\r\n      }\r\n    }\r\n  }));\r\n  app.use(\r\n    rateLimit({\r\n      windowMs: 15 * 60 * 1000, // 15 minutes\r\n      max: 500, // limit each IP to 100 requests per windowMs\r\n    }),\r\n  );\r\n  const port = process.env.PORT || 3000;\r\n  await app.listen(port, () => {\r\n    Logger.log(`Listening at http://localhost:${port}/${globalPrefix}`);\r\n  });\r\n}\r\n\r\nbootstrap();\r\n"],"names":[],"sourceRoot":""}